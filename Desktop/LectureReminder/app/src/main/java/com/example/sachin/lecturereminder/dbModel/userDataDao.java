package com.example.sachin.lecturereminder.dbModel;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.sachin.lecturereminder.dbModel.userData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DATA".
*/
public class userDataDao extends AbstractDao<userData, Long> {

    public static final String TABLENAME = "USER_DATA";

    /**
     * Properties of entity userData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ClassName = new Property(2, String.class, "className", false, "CLASS_NAME");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property Mobile = new Property(4, String.class, "mobile", false, "MOBILE");
        public final static Property BloodGroup = new Property(5, String.class, "bloodGroup", false, "BLOOD_GROUP");
    };

    private DaoSession daoSession;


    public userDataDao(DaoConfig config) {
        super(config);
    }
    
    public userDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"CLASS_NAME\" TEXT NOT NULL ," + // 2: className
                "\"EMAIL\" TEXT NOT NULL ," + // 3: email
                "\"MOBILE\" TEXT NOT NULL ," + // 4: mobile
                "\"BLOOD_GROUP\" TEXT NOT NULL );"); // 5: bloodGroup
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, userData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getClassName());
        stmt.bindString(4, entity.getEmail());
        stmt.bindString(5, entity.getMobile());
        stmt.bindString(6, entity.getBloodGroup());
    }

    @Override
    protected void attachEntity(userData entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public userData readEntity(Cursor cursor, int offset) {
        userData entity = new userData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // className
            cursor.getString(offset + 3), // email
            cursor.getString(offset + 4), // mobile
            cursor.getString(offset + 5) // bloodGroup
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, userData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setClassName(cursor.getString(offset + 2));
        entity.setEmail(cursor.getString(offset + 3));
        entity.setMobile(cursor.getString(offset + 4));
        entity.setBloodGroup(cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(userData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(userData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
